//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DMS_UAT_DOCUMENT_SERVICE
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://uat.mfdms.com/Webservice/AddDocument.jws", ConfigurationName="DMS_UAT_DOCUMENT_SERVICE.AddDocument")]
    public interface AddDocument
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        System.Threading.Tasks.Task<DMS_UAT_DOCUMENT_SERVICE.addDocumentResponse> addDocumentAsync(DMS_UAT_DOCUMENT_SERVICE.addDocumentRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="addDocument", WrapperNamespace="http://DefaultNamespace", IsWrapped=true)]
    public partial class addDocumentRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string mahindraAction;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public string documentType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public string userName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=3)]
        public string[] propsLableValueArray;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=4)]
        public string fileExt;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=5)]
        [System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")]
        public byte[] docObjArry;
        
        public addDocumentRequest()
        {
        }
        
        public addDocumentRequest(string mahindraAction, string documentType, string userName, string[] propsLableValueArray, string fileExt, byte[] docObjArry)
        {
            this.mahindraAction = mahindraAction;
            this.documentType = documentType;
            this.userName = userName;
            this.propsLableValueArray = propsLableValueArray;
            this.fileExt = fileExt;
            this.docObjArry = docObjArry;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="addDocumentResponse", WrapperNamespace="http://uat.mfdms.com/Webservice/AddDocument.jws", IsWrapped=true)]
    public partial class addDocumentResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public object[] addDocumentReturn;
        
        public addDocumentResponse()
        {
        }
        
        public addDocumentResponse(object[] addDocumentReturn)
        {
            this.addDocumentReturn = addDocumentReturn;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    public interface AddDocumentChannel : DMS_UAT_DOCUMENT_SERVICE.AddDocument, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    public partial class AddDocumentClient : System.ServiceModel.ClientBase<DMS_UAT_DOCUMENT_SERVICE.AddDocument>, DMS_UAT_DOCUMENT_SERVICE.AddDocument
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public AddDocumentClient() : 
                base(AddDocumentClient.GetDefaultBinding(), AddDocumentClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.AddDocument.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AddDocumentClient(EndpointConfiguration endpointConfiguration) : 
                base(AddDocumentClient.GetBindingForEndpoint(endpointConfiguration), AddDocumentClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AddDocumentClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(AddDocumentClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AddDocumentClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(AddDocumentClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AddDocumentClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<DMS_UAT_DOCUMENT_SERVICE.addDocumentResponse> DMS_UAT_DOCUMENT_SERVICE.AddDocument.addDocumentAsync(DMS_UAT_DOCUMENT_SERVICE.addDocumentRequest request)
        {
            return base.Channel.addDocumentAsync(request);
        }
        
        public System.Threading.Tasks.Task<DMS_UAT_DOCUMENT_SERVICE.addDocumentResponse> addDocumentAsync(string mahindraAction, string documentType, string userName, string[] propsLableValueArray, string fileExt, byte[] docObjArry)
        {
            DMS_UAT_DOCUMENT_SERVICE.addDocumentRequest inValue = new DMS_UAT_DOCUMENT_SERVICE.addDocumentRequest();
            inValue.mahindraAction = mahindraAction;
            inValue.documentType = documentType;
            inValue.userName = userName;
            inValue.propsLableValueArray = propsLableValueArray;
            inValue.fileExt = fileExt;
            inValue.docObjArry = docObjArry;
            return ((DMS_UAT_DOCUMENT_SERVICE.AddDocument)(this)).addDocumentAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.AddDocument))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.AddDocument))
            {
                return new System.ServiceModel.EndpointAddress("http://uat.mfdms.com/Webservice/AddDocument.jws");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return AddDocumentClient.GetBindingForEndpoint(EndpointConfiguration.AddDocument);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return AddDocumentClient.GetEndpointAddress(EndpointConfiguration.AddDocument);
        }
        
        public enum EndpointConfiguration
        {
            
            AddDocument,
        }
    }
}
